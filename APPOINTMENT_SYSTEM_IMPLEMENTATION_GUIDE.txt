HEALSYNC APPOINTMENT SYSTEM - COMPLETE IMPLEMENTATION GUIDE
=============================================================

TABLE OF CONTENTS
=================
1. System Overview
2. Database Structure & Relationships
3. API Endpoints & Data Flow
4. Appointment Booking Logic
5. Frontend Implementation Strategy
6. Doctor Interface Components
7. Patient Interface Components
8. Step-by-Step Implementation
9. Data Flow Scenarios
10. Error Handling & Validation
11. Testing Scenarios
12. Best Practices & Professional Standards

=============================================================================
1. SYSTEM OVERVIEW
=============================================================================

The Appointment System is a critical component of HealSync that enables seamless 
scheduling between patients and doctors. It handles real-time availability 
checking, automatic doctor assignment, and appointment management.

CORE CONCEPT:
- Patients request appointments by specialty and preferred time slot
- System automatically finds available doctors matching the criteria
- Appointments are scheduled with conflict prevention
- Both doctors and patients can view and manage their appointments
- System maintains appointment history and status tracking

KEY ENTITIES:
- Appointment: The main appointment record
- Doctor: Healthcare provider with schedules and specialties
- Patient: Person seeking medical care
- DoctorSchedule: Doctor's weekly availability patterns
- DoctorBlock: Doctor's unavailable time periods
- AppointmentStatus: Current state of appointment

APPOINTMENT LIFECYCLE:
1. Patient searches for available slots
2. System checks doctor availability
3. Patient books appointment
4. Doctor receives booking notification
5. Appointment confirmed/scheduled
6. Either party can cancel/reschedule
7. Appointment completion and follow-up

=============================================================================
2. DATABASE STRUCTURE & RELATIONSHIPS
=============================================================================

AppointmentStatus Table:
-----------------------
appointmentId (Primary Key) - Unique identifier for each appointment
doctorId (Foreign Key) - Links to Doctor table
patientId (Foreign Key) - Links to Patient table
date - Appointment date (YYYY-MM-DD)
startTime - Appointment start time (HH:MM:SS)
endTime - Appointment end time (HH:MM:SS)
status - 'SCHEDULED', 'CONFIRMED', 'CANCELLED', 'COMPLETED', 'NO_SHOW'
doctorName - Doctor's name (denormalized for quick access)
patientName - Patient's name (denormalized for quick access)
createdAt - When appointment was created
updatedAt - Last modification timestamp

Doctor Table:
------------
doctorId (Primary Key) - Unique identifier
name - Doctor's full name
speaciality - Medical specialty (Cardiology, Neurology, etc.)
email - Contact email
mobileNo - Contact phone number
bio - Professional background
shift - Default shift preference
password - Authentication credential

Patient Table:
-------------
patientId (Primary Key) - Unique identifier
patientName - Patient's full name
patientAge - Age
gender - Gender
mobileNo - Contact phone number
email - Contact email
password - Authentication credential

DoctorSchedule Table:
--------------------
scheduleId (Primary Key) - Unique identifier
doctorId (Foreign Key) - Links to Doctor
dayOfWeek - MONDAY, TUESDAY, WEDNESDAY, etc.
shiftType - DAY, NIGHT, ON_CALL
startTime - Shift start time
endTime - Shift end time
isActive - Whether schedule is currently active

DoctorBlock Table:
-----------------
blockId (Primary Key) - Unique identifier
doctorId (Foreign Key) - Links to Doctor
startDateTime - Block start (date and time)
endDateTime - Block end (date and time)
reason - 'break', 'out_of_office', 'emergency', etc.
description - Additional details
isActive - Whether block is currently active

RELATIONSHIP DIAGRAM:
Patient (1) ←→ (Many) AppointmentStatus ←→ (Many) Doctor
Doctor (1) ←→ (Many) DoctorSchedule
Doctor (1) ←→ (Many) DoctorBlock

=============================================================================
3. API ENDPOINTS & DATA FLOW
=============================================================================

MAIN APPOINTMENT ENDPOINTS:

1. BOOK APPOINTMENT:
Method: POST
URL: /v1/healsync/book/appointment
Query Parameters:
- speaciality: Doctor's specialty (required)
- startDateTime: Preferred start time (required)
- endDateTime: Preferred end time (required)  
- patientId: Patient requesting appointment (required)

REQUEST EXAMPLE:
POST /v1/healsync/book/appointment?speaciality=Cardiology&startDateTime=2025-08-15T10:00:00&endDateTime=2025-08-15T11:00:00&patientId=1

RESPONSE FORMAT:
{
  "appointmentId": 1,
  "doctorId": 1,
  "doctorName": "Dr. John Smith",
  "patientId": 1,
  "patientName": "John Doe",
  "date": "2025-08-15",
  "startTime": "10:00:00",
  "endTime": "11:00:00",
  "status": "SCHEDULED"
}

2. CANCEL APPOINTMENT:
Method: POST
URL: /v1/healsync/book/cancel
Query Parameters:
- appointmentId: Appointment to cancel (required)
- doctorId: Doctor's ID for authorization (required)

REQUEST EXAMPLE:
POST /v1/healsync/book/cancel?appointmentId=1&doctorId=1

RESPONSE:
"Appointment cancelled successfully."

3. GET DOCTOR APPOINTMENTS:
Method: GET
URL: /v1/healsync/doctor/{doctorId}/appointments
Response: Array of doctor's appointments

4. GET PATIENT APPOINTMENTS:
Method: GET
URL: /v1/healsync/patient/{patientId}/appointments  
Response: Array of patient's appointments

=============================================================================
4. APPOINTMENT BOOKING LOGIC
=============================================================================

AVAILABILITY CHECKING ALGORITHM:

Step 1: Find Doctors by Specialty
- Query doctors with matching specialty
- Filter only active doctors

Step 2: Check Schedule Availability
- For each doctor, check if they have schedule for requested day
- Verify requested time falls within doctor's working hours
- Check shift type compatibility (DAY/NIGHT/ON_CALL)

Step 3: Check for Conflicts
- Verify no existing appointments overlap with requested time
- Check for doctor blocks (breaks, out of office) during requested time
- Ensure minimum appointment duration requirements

Step 4: Doctor Selection
- If multiple doctors available, select based on criteria:
  * Least busy doctor (fewer appointments)
  * Earliest available slot
  * Doctor preference/rating (if implemented)

Step 5: Create Appointment
- Generate unique appointment ID
- Insert appointment record with SCHEDULED status
- Update doctor's calendar
- Send confirmation notifications

BUSINESS RULES:
- Minimum appointment duration: 30 minutes
- Maximum appointment duration: 2 hours
- No overlapping appointments for same doctor
- Appointments must be within doctor's working hours
- Cannot book appointments in the past
- Maximum advance booking: 30 days

=============================================================================
5. FRONTEND IMPLEMENTATION STRATEGY
=============================================================================

The frontend should provide distinct interfaces for patients and doctors:

A) PATIENT INTERFACE - Appointment Booking & Management
B) DOCTOR INTERFACE - Schedule Management & Appointment Viewing

PATIENT USER JOURNEY:
1. Patient logs in to portal
2. Patient searches for appointments by specialty
3. System shows available time slots
4. Patient selects preferred slot
5. System confirms booking with doctor assignment
6. Patient receives confirmation with doctor details
7. Patient can view, reschedule, or cancel appointments

DOCTOR USER JOURNEY:
1. Doctor logs in to portal
2. Doctor views daily/weekly schedule
3. Doctor sees incoming appointment requests
4. Doctor can accept/decline requests (if approval required)
5. Doctor manages availability (set blocks, update schedule)
6. Doctor views patient details before appointments
7. Doctor marks appointments as completed

TECHNICAL ARCHITECTURE:
- Real-time availability checking
- Responsive calendar interface
- Push notifications for booking confirmations
- Conflict prevention mechanisms
- Mobile-friendly design
- Accessibility compliance

=============================================================================
6. DOCTOR INTERFACE COMPONENTS
=============================================================================

DOCTOR DASHBOARD LAYOUT:
=======================

```
Doctor Dashboard - Dr. John Smith (Cardiology)
==============================================

[Today's Schedule - August 15, 2025]
┌─────────────────────────────────────────────────────────────┐
│ 09:00 - 10:00  │ John Doe (Patient ID: 123)                │
│                │ Status: SCHEDULED                          │
│                │ [View Details] [Mark Complete] [Cancel]    │
├─────────────────────────────────────────────────────────────┤
│ 10:30 - 11:30  │ Sarah Wilson (Patient ID: 124)            │
│                │ Status: CONFIRMED                          │
│                │ [View Details] [Mark Complete] [Cancel]    │
├─────────────────────────────────────────────────────────────┤
│ 14:00 - 15:00  │ AVAILABLE SLOT                            │
│                │ [Block Time] [Set Break]                   │
└─────────────────────────────────────────────────────────────┘

[Weekly View] [Monthly View] [Manage Schedule] [Set Availability]
```

REQUIRED COMPONENTS:

1. **DoctorScheduleCalendar**
   - Weekly/monthly calendar view
   - Color-coded appointment status
   - Drag-and-drop rescheduling
   - Click to view appointment details

2. **AppointmentDetailsModal**
   - Patient information display
   - Appointment time and duration
   - Patient medical history access
   - Action buttons (complete, cancel, reschedule)

3. **AvailabilityManager**
   - Set working hours for each day
   - Create time blocks (breaks, out of office)
   - Manage shift patterns
   - Holiday/vacation scheduling

4. **AppointmentList**
   - List view of today's appointments
   - Filter by status (scheduled, confirmed, completed)
   - Search by patient name
   - Quick action buttons

5. **PatientInfoPanel**
   - Patient demographics
   - Previous appointment history
   - Treatment plans and medications
   - Contact information

=============================================================================
7. PATIENT INTERFACE COMPONENTS
=============================================================================

PATIENT BOOKING INTERFACE:
=========================

```
Book an Appointment
===================

[Find a Doctor]
Specialty: [Cardiology ▼]
Preferred Date: [📅 August 15, 2025]
Preferred Time: [🕘 10:00 AM ▼]

[Available Doctors and Slots]
┌─────────────────────────────────────────────────────────────┐
│ Dr. John Smith - Cardiology                                │
│ Rating: ⭐⭐⭐⭐⭐ (4.8/5) | Experience: 15 years            │
│                                                             │
│ Available Slots Today:                                      │
│ ○ 10:00 AM - 11:00 AM    ○ 2:00 PM - 3:00 PM              │
│ ○ 11:30 AM - 12:30 PM    ○ 4:00 PM - 5:00 PM              │
│                                                             │
│ [View Profile] [Book Appointment]                           │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ Dr. Emily Brown - Cardiology                               │
│ Rating: ⭐⭐⭐⭐ (4.6/5) | Experience: 12 years              │
│                                                             │
│ Available Slots Today:                                      │
│ ○ 9:00 AM - 10:00 AM     ○ 3:00 PM - 4:00 PM              │
│ ○ 1:00 PM - 2:00 PM      ○ 5:00 PM - 6:00 PM              │
│                                                             │
│ [View Profile] [Book Appointment]                           │
└─────────────────────────────────────────────────────────────┘
```

PATIENT APPOINTMENT MANAGEMENT:
==============================

```
My Appointments
===============

[Upcoming Appointments]
┌─────────────────────────────────────────────────────────────┐
│ August 15, 2025 | 10:00 AM - 11:00 AM                       │
│ Dr. John Smith - Cardiology                                │
│ Status: SCHEDULED                                           │
│ Location: Hospital Main Campus, Room 205                    │
│                                                             │
│ [View Details] [Reschedule] [Cancel] [Get Directions]       │
└─────────────────────────────────────────────────────────────┘

[Past Appointments]
┌─────────────────────────────────────────────────────────────┐
│ August 10, 2025 | 2:00 PM - 3:00 PM                         │
│ Dr. Sarah Brown - Neurology                                │
│ Status: COMPLETED                                           │
│                                                             │
│ [View Summary] [Download Report] [Book Follow-up]           │
└─────────────────────────────────────────────────────────────┘
```

REQUIRED COMPONENTS:

1. **DoctorSearchFilter**
   - Specialty dropdown selection
   - Date picker for preferred appointment date
   - Time preference selection
   - Location/distance filter

2. **AvailableSlotGrid**
   - Calendar view with available slots
   - Doctor information cards
   - Real-time availability updates
   - Slot booking functionality

3. **AppointmentBookingForm**
   - Doctor and time slot confirmation
   - Reason for visit input
   - Special requirements/notes
   - Insurance information collection

4. **PatientAppointmentList**
   - Upcoming appointments display
   - Past appointments history
   - Status tracking and updates
   - Reminder settings

5. **AppointmentConfirmation**
   - Booking confirmation display
   - Doctor contact information
   - Appointment preparation instructions
   - Add to calendar functionality

=============================================================================
8. STEP-BY-STEP IMPLEMENTATION
=============================================================================

STEP 1: BACKEND API SETUP
=========================

Ensure these endpoints are working:
- POST /v1/healsync/book/appointment (with query parameters)
- POST /v1/healsync/book/cancel (with query parameters)
- GET /v1/healsync/doctor/public-profiles (for doctor list)
- GET /v1/healsync/doctor/{id}/schedule (for availability)
- GET /v1/healsync/doctor/{id}/blocks (for unavailable times)

STEP 2: PATIENT BOOKING INTERFACE
=================================

Create React Components:
```
src/
├── components/
│   ├── patient/
│   │   ├── AppointmentBooking.tsx
│   │   ├── DoctorSearchFilter.tsx
│   │   ├── AvailableSlotGrid.tsx
│   │   ├── BookingConfirmation.tsx
│   │   └── MyAppointments.tsx
│   └── shared/
│       ├── TimeSlotPicker.tsx
│       ├── DoctorCard.tsx
│       └── AppointmentCard.tsx
```

AppointmentBooking.tsx Implementation:
```typescript
import React, { useState, useEffect } from 'react';

interface Doctor {
  doctorId: number;
  name: string;
  speaciality: string;
  bio: string;
  email: string;
  mobileNo: string;
}

interface TimeSlot {
  startTime: string;
  endTime: string;
  available: boolean;
}

interface BookingForm {
  speaciality: string;
  selectedDate: string;
  selectedTime: string;
  doctorId: number;
  patientId: number;
}

const AppointmentBooking: React.FC = () => {
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [selectedSpecialty, setSelectedSpecialty] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [availableSlots, setAvailableSlots] = useState<TimeSlot[]>([]);
  const [loading, setLoading] = useState(false);
  const [bookingResult, setBookingResult] = useState(null);

  // Load doctors on component mount
  useEffect(() => {
    loadDoctors();
  }, []);

  // Load available slots when specialty/date changes
  useEffect(() => {
    if (selectedSpecialty && selectedDate) {
      loadAvailableSlots();
    }
  }, [selectedSpecialty, selectedDate]);

  const loadDoctors = async () => {
    try {
      const response = await fetch('/v1/healsync/doctor/public-profiles');
      const doctorList = await response.json();
      setDoctors(doctorList);
    } catch (error) {
      console.error('Failed to load doctors:', error);
    }
  };

  const loadAvailableSlots = async () => {
    setLoading(true);
    try {
      // Get doctors matching specialty
      const specialtyDoctors = doctors.filter(
        doctor => doctor.speaciality.toLowerCase() === selectedSpecialty.toLowerCase()
      );

      // For each doctor, check their schedule for selected date
      const allSlots: TimeSlot[] = [];
      for (const doctor of specialtyDoctors) {
        const scheduleResponse = await fetch(`/v1/healsync/doctor/${doctor.doctorId}/schedule`);
        const schedule = await scheduleResponse.json();
        
        // Convert schedule to available time slots
        const daySchedule = schedule.filter(s => 
          s.dayOfWeek === getDayOfWeek(selectedDate) && s.isActive
        );
        
        for (const shift of daySchedule) {
          const slots = generateTimeSlots(shift.startTime, shift.endTime);
          allSlots.push(...slots);
        }
      }

      setAvailableSlots(allSlots);
    } catch (error) {
      console.error('Failed to load available slots:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateTimeSlots = (startTime: string, endTime: string): TimeSlot[] => {
    const slots: TimeSlot[] = [];
    const start = new Date(`2000-01-01T${startTime}`);
    const end = new Date(`2000-01-01T${endTime}`);
    
    while (start < end) {
      const slotStart = start.toTimeString().substring(0, 8);
      start.setHours(start.getHours() + 1); // 1-hour slots
      const slotEnd = start.toTimeString().substring(0, 8);
      
      if (start <= end) {
        slots.push({
          startTime: slotStart,
          endTime: slotEnd,
          available: true // This would be checked against existing appointments
        });
      }
    }
    
    return slots;
  };

  const getDayOfWeek = (dateString: string): string => {
    const date = new Date(dateString);
    const days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    return days[date.getDay()];
  };

  const bookAppointment = async (timeSlot: TimeSlot) => {
    setLoading(true);
    try {
      const startDateTime = `${selectedDate}T${timeSlot.startTime}`;
      const endDateTime = `${selectedDate}T${timeSlot.endTime}`;
      const patientId = getCurrentPatientId(); // From auth context

      const response = await fetch(
        `/v1/healsync/book/appointment?speaciality=${selectedSpecialty}&startDateTime=${startDateTime}&endDateTime=${endDateTime}&patientId=${patientId}`,
        { method: 'POST' }
      );

      if (response.ok) {
        const result = await response.json();
        setBookingResult(result);
        alert(`Appointment booked successfully with ${result.doctorName}!`);
      } else {
        const error = await response.text();
        alert(`Booking failed: ${error}`);
      }
    } catch (error) {
      alert('Failed to book appointment. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const getCurrentPatientId = (): number => {
    // This would come from your authentication context
    return 1; // Placeholder
  };

  return (
    <div className="appointment-booking">
      <h2>Book an Appointment</h2>
      
      {/* Specialty Selection */}
      <div className="booking-filters">
        <div className="filter-group">
          <label>Medical Specialty:</label>
          <select 
            value={selectedSpecialty}
            onChange={(e) => setSelectedSpecialty(e.target.value)}
          >
            <option value="">Select Specialty</option>
            <option value="Cardiology">Cardiology</option>
            <option value="Neurology">Neurology</option>
            <option value="Orthopedics">Orthopedics</option>
            <option value="Pediatrics">Pediatrics</option>
            <option value="Dermatology">Dermatology</option>
          </select>
        </div>

        <div className="filter-group">
          <label>Preferred Date:</label>
          <input
            type="date"
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
            min={new Date().toISOString().split('T')[0]} // No past dates
          />
        </div>
      </div>

      {/* Available Slots */}
      {loading && <div className="loading">Finding available appointments...</div>}
      
      {availableSlots.length > 0 && (
        <div className="available-slots">
          <h3>Available Time Slots</h3>
          <div className="slots-grid">
            {availableSlots.map((slot, index) => (
              <div key={index} className={`time-slot ${slot.available ? 'available' : 'unavailable'}`}>
                <div className="slot-time">
                  {formatTime(slot.startTime)} - {formatTime(slot.endTime)}
                </div>
                {slot.available && (
                  <button 
                    onClick={() => bookAppointment(slot)}
                    disabled={loading}
                  >
                    Book This Slot
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Booking Confirmation */}
      {bookingResult && (
        <div className="booking-confirmation">
          <h3>Appointment Confirmed!</h3>
          <div className="confirmation-details">
            <p><strong>Appointment ID:</strong> {bookingResult.appointmentId}</p>
            <p><strong>Doctor:</strong> {bookingResult.doctorName}</p>
            <p><strong>Date:</strong> {bookingResult.date}</p>
            <p><strong>Time:</strong> {bookingResult.startTime} - {bookingResult.endTime}</p>
            <p><strong>Status:</strong> {bookingResult.status}</p>
          </div>
        </div>
      )}
    </div>
  );
};

const formatTime = (timeString: string): string => {
  const [hours, minutes] = timeString.split(':');
  const hour = parseInt(hours);
  const ampm = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour % 12 || 12;
  return `${displayHour}:${minutes} ${ampm}`;
};

export default AppointmentBooking;
```

STEP 3: DOCTOR SCHEDULE INTERFACE
=================================

DoctorScheduleView.tsx Implementation:
```typescript
import React, { useState, useEffect } from 'react';

interface Appointment {
  appointmentId: number;
  patientId: number;
  patientName: string;
  date: string;
  startTime: string;
  endTime: string;
  status: string;
}

const DoctorScheduleView: React.FC = () => {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    loadDoctorAppointments();
  }, [selectedDate]);

  const loadDoctorAppointments = async () => {
    setLoading(true);
    try {
      const doctorId = getCurrentDoctorId(); // From auth context
      const response = await fetch(`/v1/healsync/doctor/${doctorId}/appointments`);
      
      if (response.ok) {
        const allAppointments = await response.json();
        // Filter by selected date
        const dayAppointments = allAppointments.filter(
          apt => apt.date === selectedDate
        );
        setAppointments(dayAppointments);
      }
    } catch (error) {
      console.error('Failed to load appointments:', error);
    } finally {
      setLoading(false);
    }
  };

  const cancelAppointment = async (appointmentId: number) => {
    if (!confirm('Are you sure you want to cancel this appointment?')) return;

    try {
      const doctorId = getCurrentDoctorId();
      const response = await fetch(
        `/v1/healsync/book/cancel?appointmentId=${appointmentId}&doctorId=${doctorId}`,
        { method: 'POST' }
      );

      if (response.ok) {
        alert('Appointment cancelled successfully');
        loadDoctorAppointments(); // Refresh list
      } else {
        const error = await response.text();
        alert(`Failed to cancel: ${error}`);
      }
    } catch (error) {
      alert('Failed to cancel appointment');
    }
  };

  const markComplete = async (appointmentId: number) => {
    // This would require additional API endpoint to update status
    alert('Mark complete functionality would be implemented here');
  };

  const getCurrentDoctorId = (): number => {
    // This would come from your authentication context
    return 1; // Placeholder
  };

  return (
    <div className="doctor-schedule">
      <h2>My Schedule</h2>
      
      <div className="schedule-controls">
        <input
          type="date"
          value={selectedDate}
          onChange={(e) => setSelectedDate(e.target.value)}
        />
        <button onClick={loadDoctorAppointments}>Refresh</button>
      </div>

      {loading && <div className="loading">Loading appointments...</div>}

      <div className="appointments-list">
        {appointments.length === 0 ? (
          <div className="no-appointments">
            No appointments scheduled for {selectedDate}
          </div>
        ) : (
          appointments.map(appointment => (
            <div key={appointment.appointmentId} className="appointment-card">
              <div className="appointment-time">
                {formatTime(appointment.startTime)} - {formatTime(appointment.endTime)}
              </div>
              <div className="appointment-details">
                <h4>{appointment.patientName}</h4>
                <p>Patient ID: {appointment.patientId}</p>
                <span className={`status ${appointment.status.toLowerCase()}`}>
                  {appointment.status}
                </span>
              </div>
              <div className="appointment-actions">
                <button onClick={() => alert('View patient details')}>
                  View Details
                </button>
                <button onClick={() => markComplete(appointment.appointmentId)}>
                  Mark Complete
                </button>
                <button 
                  onClick={() => cancelAppointment(appointment.appointmentId)}
                  className="cancel-btn"
                >
                  Cancel
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default DoctorScheduleView;
```

STEP 4: PATIENT APPOINTMENT MANAGEMENT
=====================================

MyAppointments.tsx Implementation:
```typescript
import React, { useState, useEffect } from 'react';

interface PatientAppointment {
  appointmentId: number;
  doctorId: number;
  doctorName: string;
  date: string;
  startTime: string;
  endTime: string;
  status: string;
}

const MyAppointments: React.FC = () => {
  const [appointments, setAppointments] = useState<PatientAppointment[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    loadPatientAppointments();
  }, []);

  const loadPatientAppointments = async () => {
    setLoading(true);
    try {
      const patientId = getCurrentPatientId(); // From auth context
      const response = await fetch(`/v1/healsync/patient/${patientId}/appointments`);
      
      if (response.ok) {
        const appointmentList = await response.json();
        setAppointments(appointmentList);
      }
    } catch (error) {
      console.error('Failed to load appointments:', error);
    } finally {
      setLoading(false);
    }
  };

  const cancelAppointment = async (appointment: PatientAppointment) => {
    if (!confirm('Are you sure you want to cancel this appointment?')) return;

    try {
      const response = await fetch(
        `/v1/healsync/book/cancel?appointmentId=${appointment.appointmentId}&doctorId=${appointment.doctorId}`,
        { method: 'POST' }
      );

      if (response.ok) {
        alert('Appointment cancelled successfully');
        loadPatientAppointments(); // Refresh list
      } else {
        const error = await response.text();
        alert(`Failed to cancel: ${error}`);
      }
    } catch (error) {
      alert('Failed to cancel appointment');
    }
  };

  const getCurrentPatientId = (): number => {
    // This would come from your authentication context
    return 1; // Placeholder
  };

  const isUpcoming = (date: string, time: string): boolean => {
    const appointmentDateTime = new Date(`${date}T${time}`);
    return appointmentDateTime > new Date();
  };

  const upcomingAppointments = appointments.filter(apt => 
    isUpcoming(apt.date, apt.startTime)
  );

  const pastAppointments = appointments.filter(apt => 
    !isUpcoming(apt.date, apt.startTime)
  );

  return (
    <div className="my-appointments">
      <h2>My Appointments</h2>

      {loading && <div className="loading">Loading appointments...</div>}

      {/* Upcoming Appointments */}
      <section className="upcoming-appointments">
        <h3>Upcoming Appointments</h3>
        {upcomingAppointments.length === 0 ? (
          <div className="no-appointments">
            No upcoming appointments scheduled.
            <button onClick={() => window.location.href = '/book-appointment'}>
              Book New Appointment
            </button>
          </div>
        ) : (
          upcomingAppointments.map(appointment => (
            <div key={appointment.appointmentId} className="appointment-card upcoming">
              <div className="appointment-header">
                <h4>{appointment.doctorName}</h4>
                <span className={`status ${appointment.status.toLowerCase()}`}>
                  {appointment.status}
                </span>
              </div>
              <div className="appointment-details">
                <p><strong>Date:</strong> {formatDate(appointment.date)}</p>
                <p><strong>Time:</strong> {formatTime(appointment.startTime)} - {formatTime(appointment.endTime)}</p>
                <p><strong>Appointment ID:</strong> {appointment.appointmentId}</p>
              </div>
              <div className="appointment-actions">
                <button onClick={() => alert('View doctor profile')}>
                  View Doctor
                </button>
                <button onClick={() => alert('Reschedule functionality')}>
                  Reschedule
                </button>
                <button 
                  onClick={() => cancelAppointment(appointment)}
                  className="cancel-btn"
                >
                  Cancel
                </button>
              </div>
            </div>
          ))
        )}
      </section>

      {/* Past Appointments */}
      <section className="past-appointments">
        <h3>Past Appointments</h3>
        {pastAppointments.length === 0 ? (
          <div className="no-appointments">No past appointments found.</div>
        ) : (
          pastAppointments.map(appointment => (
            <div key={appointment.appointmentId} className="appointment-card past">
              <div className="appointment-header">
                <h4>{appointment.doctorName}</h4>
                <span className={`status ${appointment.status.toLowerCase()}`}>
                  {appointment.status}
                </span>
              </div>
              <div className="appointment-details">
                <p><strong>Date:</strong> {formatDate(appointment.date)}</p>
                <p><strong>Time:</strong> {formatTime(appointment.startTime)} - {formatTime(appointment.endTime)}</p>
              </div>
              <div className="appointment-actions">
                <button onClick={() => alert('View appointment summary')}>
                  View Summary
                </button>
                <button onClick={() => alert('Book follow-up')}>
                  Book Follow-up
                </button>
              </div>
            </div>
          ))
        )}
      </section>
    </div>
  );
};

const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const formatTime = (timeString: string): string => {
  const [hours, minutes] = timeString.split(':');
  const hour = parseInt(hours);
  const ampm = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour % 12 || 12;
  return `${displayHour}:${minutes} ${ampm}`;
};

export default MyAppointments;
```

=============================================================================
9. DATA FLOW SCENARIOS
=============================================================================

SCENARIO 1: PATIENT BOOKS APPOINTMENT
=====================================

1. **Patient Interface Loading:**
   - Frontend loads specialty options from doctor database
   - Date picker shows available dates (excluding past dates)
   - User selects "Cardiology" and "August 15, 2025"

2. **Availability Check:**
   - Frontend calls GET /v1/healsync/doctor/public-profiles
   - Filters doctors by specialty = "Cardiology"
   - For each cardiologist, calls GET /v1/healsync/doctor/{id}/schedule
   - Checks if doctor works on selected day (Tuesday)
   - Generates time slots based on working hours

3. **Slot Display:**
   - Frontend shows available time slots: 9:00 AM, 10:00 AM, 2:00 PM, 3:00 PM
   - Each slot shows "Available" or "Booked" status
   - Patient selects "10:00 AM - 11:00 AM"

4. **Booking Request:**
   - Frontend calls POST /v1/healsync/book/appointment with parameters:
     * speaciality=Cardiology
     * startDateTime=2025-08-15T10:00:00
     * endDateTime=2025-08-15T11:00:00
     * patientId=123

5. **Backend Processing:**
   - System finds available cardiologists
   - Checks Dr. John Smith is available 10:00-11:00 on Tuesday
   - Verifies no existing appointments conflict
   - Creates appointment record with SCHEDULED status
   - Assigns Dr. John Smith to the appointment

6. **Confirmation Response:**
   - Backend returns appointment details:
     ```json
     {
       "appointmentId": 456,
       "doctorId": 1,
       "doctorName": "Dr. John Smith",
       "patientId": 123,
       "patientName": "John Doe",
       "date": "2025-08-15",
       "startTime": "10:00:00",
       "endTime": "11:00:00",
       "status": "SCHEDULED"
     }
     ```

7. **Frontend Confirmation:**
   - Shows success message with appointment details
   - Displays doctor's contact information
   - Offers to add appointment to calendar
   - Redirects to "My Appointments" page

SCENARIO 2: DOCTOR VIEWS DAILY SCHEDULE
======================================

1. **Doctor Login:**
   - Dr. John Smith logs into doctor portal
   - System identifies doctorId = 1
   - Dashboard loads with today's date selected

2. **Schedule Loading:**
   - Frontend calls GET /v1/healsync/doctor/1/appointments
   - Backend queries appointments for doctorId=1
   - Returns appointments for current date

3. **Schedule Display:**
   ```
   Today's Schedule - August 15, 2025
   9:00 AM - 10:00 AM    | Sarah Wilson (Patient ID: 124)
   10:00 AM - 11:00 AM   | John Doe (Patient ID: 123) 
   11:00 AM - 12:00 PM   | AVAILABLE
   2:00 PM - 3:00 PM     | Mike Johnson (Patient ID: 125)
   3:00 PM - 4:00 PM     | AVAILABLE
   ```

4. **Doctor Actions:**
   - Doctor clicks "View Details" for John Doe appointment
   - Modal opens showing patient information and medical history
   - Doctor can cancel, reschedule, or mark appointment as completed

SCENARIO 3: APPOINTMENT CANCELLATION
===================================

1. **Cancellation Request:**
   - Patient clicks "Cancel" on upcoming appointment
   - System shows confirmation dialog with cancellation policy
   - Patient confirms cancellation

2. **API Call:**
   - Frontend calls POST /v1/healsync/book/cancel with:
     * appointmentId=456
     * doctorId=1 (for authorization)

3. **Backend Processing:**
   - System verifies appointment exists
   - Checks cancellation is allowed (e.g., not too close to appointment time)
   - Updates appointment status to "CANCELLED"
   - Frees up the time slot for other patients

4. **Notification:**
   - System sends notification to doctor about cancellation
   - Patient receives cancellation confirmation
   - Time slot becomes available for booking again

=============================================================================
10. ERROR HANDLING & VALIDATION
=============================================================================

FRONTEND VALIDATION:
===================

**Booking Form Validation:**
- Specialty selection is required
- Date cannot be in the past
- Date cannot be more than 30 days in advance
- Time slot must be selected
- Appointment duration minimum 30 minutes, maximum 2 hours

**Real-time Checks:**
- Check slot availability before allowing booking
- Prevent double-booking by disabling booked slots
- Show loading states during API calls
- Display clear error messages for failed requests

**User Experience:**
- Disable past dates in date picker
- Show "No doctors available" when specialty has no doctors
- Display "No slots available" when all times are booked
- Provide alternative date suggestions

BACKEND VALIDATION:
==================

**Business Rule Enforcement:**
- Verify patient exists and is active
- Verify doctor exists and practices selected specialty
- Check doctor's schedule allows requested time
- Prevent overlapping appointments
- Respect doctor's blocked time periods

**Data Integrity:**
- Validate date/time formats
- Check appointment duration constraints
- Prevent booking appointments in doctor's non-working hours
- Ensure appointment doesn't conflict with doctor's breaks

**Error Responses:**
```
400 Bad Request: "Invalid appointment time format"
404 Not Found: "No doctor available for the given specialty and time"
409 Conflict: "Doctor already has an appointment at this time"
422 Unprocessable Entity: "Appointment duration exceeds maximum allowed"
```

=============================================================================
11. TESTING SCENARIOS
=============================================================================

PATIENT INTERFACE TESTING:
=========================

**Test Case 1: Successful Appointment Booking**
1. Select "Cardiology" specialty
2. Choose tomorrow's date
3. Select available time slot
4. Verify booking confirmation appears
5. Check appointment appears in "My Appointments"

**Test Case 2: No Available Doctors**
1. Select obscure specialty (e.g., "Rocket Surgery")
2. Choose any date
3. Verify "No doctors available" message
4. Ensure booking button is disabled

**Test Case 3: All Slots Booked**
1. Select popular specialty on busy day
2. Verify "No available slots" message
3. Check alternative date suggestions appear

**Test Case 4: Appointment Cancellation**
1. Go to "My Appointments"
2. Click "Cancel" on upcoming appointment
3. Confirm cancellation in dialog
4. Verify appointment status changes to "CANCELLED"

DOCTOR INTERFACE TESTING:
========================

**Test Case 1: Daily Schedule View**
1. Login as doctor
2. Verify today's appointments display correctly
3. Check appointment times are in chronological order
4. Verify patient names and IDs are correct

**Test Case 2: Appointment Cancellation**
1. Click "Cancel" on patient appointment
2. Confirm cancellation
3. Verify appointment is removed from schedule
4. Check slot becomes available for rebooking

**Test Case 3: No Appointments Day**
1. Select date with no appointments
2. Verify "No appointments scheduled" message
3. Check "Set Break" or "Block Time" options available

API TESTING:
===========

**Test Case 1: Valid Appointment Booking**
```
POST /v1/healsync/book/appointment?speaciality=Cardiology&startDateTime=2025-08-15T10:00:00&endDateTime=2025-08-15T11:00:00&patientId=1

Expected: 200 OK with appointment details
```

**Test Case 2: Invalid Specialty**
```
POST /v1/healsync/book/appointment?speaciality=InvalidSpecialty&startDateTime=2025-08-15T10:00:00&endDateTime=2025-08-15T11:00:00&patientId=1

Expected: 404 "No doctor available for the given specialty and time range"
```

**Test Case 3: Past Date Booking**
```
POST /v1/healsync/book/appointment?speaciality=Cardiology&startDateTime=2025-08-01T10:00:00&endDateTime=2025-08-01T11:00:00&patientId=1

Expected: 400 "Cannot book appointments in the past"
```

**Test Case 4: Successful Cancellation**
```
POST /v1/healsync/book/cancel?appointmentId=123&doctorId=1

Expected: 200 "Appointment cancelled successfully"
```

=============================================================================
12. BEST PRACTICES & PROFESSIONAL STANDARDS
=============================================================================

SECURITY & PRIVACY:
==================

**HIPAA Compliance:**
- Encrypt all patient data in transit and at rest
- Implement proper access controls (patients see only their data)
- Audit all appointment access and modifications
- Secure doctor-patient communication channels

**Authentication & Authorization:**
- Use JWT tokens for session management
- Implement role-based access (patient vs doctor permissions)
- Require strong passwords and optional 2FA
- Session timeout for inactive users

PERFORMANCE OPTIMIZATION:
========================

**Frontend Performance:**
- Lazy load appointment history
- Cache doctor information and specialties
- Implement virtual scrolling for long appointment lists
- Use debounced search for doctor filtering

**Backend Performance:**
- Index database tables on frequently queried fields
- Implement appointment search with pagination
- Cache doctor schedules and availability
- Use database connection pooling

USER EXPERIENCE:
===============

**Accessibility:**
- Screen reader compatible appointment forms
- Keyboard navigation for all interactive elements
- High contrast mode for visually impaired users
- Clear error messages and instructions

**Mobile Responsiveness:**
- Touch-friendly appointment time selection
- Responsive calendar layout
- Mobile-optimized appointment cards
- Thumb-friendly button sizing

**Internationalization:**
- Support multiple date/time formats
- Localized appointment confirmation messages
- Time zone handling for multi-location practices
- Multi-language doctor profiles

MONITORING & ANALYTICS:
======================

**System Monitoring:**
- Track appointment booking success rates
- Monitor API response times
- Alert on failed appointment confirmations
- Track doctor utilization rates

**User Analytics:**
- Most popular specialties and time slots
- Patient booking behavior patterns
- Doctor availability optimization
- Cancellation rate analysis

PROFESSIONAL STANDARDS:
======================

**Medical Standards:**
- Follow medical appointment scheduling best practices
- Implement proper appointment reminder systems
- Support emergency appointment prioritization
- Maintain detailed appointment audit trails

**Code Quality:**
- Comprehensive unit and integration tests
- Code documentation and API documentation
- Version control with proper branching strategy
- Continuous integration and deployment

=============================================================================
IMPLEMENTATION CHECKLIST
=============================================================================

**Backend Prerequisites:**
☐ Appointment booking API endpoint functional
☐ Appointment cancellation API endpoint functional
☐ Doctor schedule management API working
☐ Database tables created and indexed
☐ API validation and error handling implemented

**Frontend Development:**
☐ Patient appointment booking interface built
☐ Doctor schedule viewing interface built
☐ Patient appointment management interface built
☐ Real-time availability checking implemented
☐ Responsive design for mobile devices

**Integration Testing:**
☐ End-to-end booking flow tested
☐ Cancellation workflow verified
☐ Doctor schedule synchronization working
☐ Error handling scenarios tested
☐ Performance testing completed

**Security & Compliance:**
☐ Authentication and authorization implemented
☐ Data encryption in place
☐ HIPAA compliance measures verified
☐ Access logging implemented
☐ Security testing completed

**Production Deployment:**
☐ Frontend application deployed
☐ Backend API deployed with database
☐ SSL certificates installed
☐ Monitoring and alerting configured
☐ User training documentation created

=============================================================================

This comprehensive implementation guide provides everything needed to build
a professional-grade appointment system for HealSync. The system handles
complex scheduling logic while maintaining simplicity for end users.

Follow this guide step-by-step to create a robust appointment management
system that serves both patients and healthcare providers effectively.
