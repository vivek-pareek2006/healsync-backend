HEALSYNC APPOINTMENT SYSTEM - COMPLETE GUIDE (BACKEND + FRONTEND)
=================================================================

1) OVERVIEW
-----------
The HealSync Appointment System allows patients to book, view, reschedule, and cancel appointments with doctors based on medical specialty and available time slots. Doctors can view their schedules, add notes to appointments, reschedule, and cancel if needed.

Key features:
- Auto-assign a doctor by specialty and availability window
- Prevent double-booking via conflict checks
- Doctor and Patient can reschedule/cancel (with role checks)
- Doctor notes stored with the appointment
- Simple REST APIs to integrate with any frontend

Primary entity: AppointmentStatus
- scheduleId (int, primary key)
- doctorId (int)
- patientId (int)
- startTime (ISO-8601 datetime)
- endTime (ISO-8601 datetime)
- status (string: booked, rescheduled, cancelled, cancelled_by_patient, etc.)
- doctorNotes (text)

2) BACKEND API CATALOG (BASE: /v1/healsync/book)
-----------------------------------------------
Assume server is http://localhost:8080
Date-time format: ISO-8601 (e.g., 2025-08-10T14:00:00)
Param alias: specialty and speaciality both supported

A. Book Appointment
- Method: POST
- URL: /v1/healsync/book/appointment
- Query Params:
  - specialty (or speaciality): string (e.g., Cardiology)
  - startDateTime: string (ISO)
  - endDateTime: string (ISO)
  - patientId: int
- 200 Response: AppointmentResponseDto JSON
- 404 Response: No doctor available for given specialty/time
- 400 Response: Invalid datetime format

Example success response fields:
{
  appointmentId, doctorId, doctorName,
  patientId, patientName,
  date, startTime, endTime,
  status
}

B. Cancel by Doctor
- Method: POST
- URL: /v1/healsync/book/cancel
- Params: appointmentId (int), doctorId (int)
- 200: "Appointment cancelled successfully."
- 404: not found or unauthorized doctor

C. Cancel by Patient
- Method: POST
- URL: /v1/healsync/book/cancel/patient
- Params: appointmentId (int), patientId (int)
- 200: "Appointment cancelled by patient."
- 404: not found or not owned by patient

D. Reschedule (Doctor or Patient)
- Method: POST
- URL: /v1/healsync/book/reschedule
- Params:
  - appointmentId (int)
  - requesterId (int)   // doctorId or patientId
  - requesterRole (string) // DOCTOR or PATIENT
  - newStartDateTime (string ISO)
  - newEndDateTime (string ISO)
- 200: AppointmentResponseDto (new times, status = rescheduled)
- 400: not found/unauthorized/conflict/invalid datetime

E. Get Single Appointment
- Method: GET
- URL: /v1/healsync/book/appointment
- Params: appointmentId (int)
- 200: AppointmentStatus JSON
- 404: not found

F. List Appointments (Patient)
- Method: GET
- URL: /v1/healsync/book/patient/appointments
- Params: patientId (int)
- 200: [AppointmentStatus, ...] ordered by startTime desc

G. List Appointments (Doctor)
- Method: GET
- URL: /v1/healsync/book/doctor/appointments
- Params: doctorId (int)
- 200: [AppointmentStatus, ...] ordered by startTime desc

H. Add/Update Doctor Notes
- Method: POST
- URL: /v1/healsync/book/notes
- Params: appointmentId (int), doctorId (int), notes (string)
- 200: "Notes updated."
- 404: not found or doctor mismatch

3) BUSINESS RULES & VALIDATION
------------------------------
- Doctor auto-assign: based on specialty + time windowâ€™s shift (DoctorShift) and no conflicts.
- Conflict detection: an appointment overlaps if start < existing.end AND end > existing.start.
- Dates: endDateTime must be after startDateTime; use ISO-8601.
- Status transitions:
  - booked -> rescheduled (on reschedule)
  - booked/rescheduled -> cancelled (doctor) or cancelled_by_patient (patient)
  - Optional: completed, no_show (can be added later)

4) FRONTEND IMPLEMENTATION (HTML/CSS/JS)
----------------------------------------
This section shows how you can integrate the above APIs in a simple, framework-agnostic way.

A. Common Setup
- Base URL: const baseUrl = 'http://localhost:8080/v1/healsync/book';
- Use fetch for requests
- Show user-friendly messages for 4xx/5xx

B. Patient UI
1) Book Appointment page
- UI Elements:
  - <select id="specialty"> with options: Cardiology, Neurology, General, Pediatric
  - <input type="datetime-local" id="start">
  - <input type="datetime-local" id="end">
  - <input type="number" id="patientId">
  - <button id="bookBtn">Book Appointment</button>
- Minimal CSS (optional txt):
  - Use a simple container, spacing, and a primary button style.

Example JS (vanilla):
// Convert datetime-local to ISO (browser local time -> ISO string)
function toIso(inputEl){
  const val = document.getElementById(inputEl).value;
  if(!val) return '';
  const d = new Date(val);
  return d.toISOString().slice(0,19); // e.g., 2025-08-10T14:00:00
}

async function bookAppointment(){
  const specialty = document.getElementById('specialty').value;
  const patientId = document.getElementById('patientId').value;
  const startIso = toIso('start');
  const endIso = toIso('end');
  const url = `${baseUrl}/appointment?specialty=${encodeURIComponent(specialty)}&startDateTime=${encodeURIComponent(startIso)}&endDateTime=${encodeURIComponent(endIso)}&patientId=${encodeURIComponent(patientId)}`;
  const res = await fetch(url, { method: 'POST' });
  const text = await res.text();
  try { console.log('Booked:', JSON.parse(text)); alert('Booked successfully'); }
  catch(e){ alert(text); }
}

document.getElementById('bookBtn').addEventListener('click', bookAppointment);

2) My Appointments page
- UI Elements:
  - <input type="number" id="patientIdList">
  - <button id="loadPatientAppts">Load My Appointments</button>
  - <div id="patientApptList"></div>

JS:
async function loadPatientAppointments(){
  const pid = document.getElementById('patientIdList').value;
  const res = await fetch(`${baseUrl}/patient/appointments?patientId=${pid}`);
  const list = await res.json();
  const container = document.getElementById('patientApptList');
  container.innerHTML = list.map(a => `#${a.scheduleId} | Dr: ${a.doctorId} | ${a.startTime} - ${a.endTime} | ${a.status}`).join('<br>');
}

document.getElementById('loadPatientAppts').addEventListener('click', loadPatientAppointments);

3) Patient Cancel / Reschedule
- Cancel:
async function cancelByPatient(appointmentId, patientId){
  const url = `${baseUrl}/cancel/patient?appointmentId=${appointmentId}&patientId=${patientId}`;
  const res = await fetch(url, { method: 'POST' });
  alert(await res.text());
}

- Reschedule:
async function rescheduleByPatient(appointmentId, patientId, newStartIso, newEndIso){
  const url = `${baseUrl}/reschedule?appointmentId=${appointmentId}&requesterId=${patientId}&requesterRole=PATIENT&newStartDateTime=${encodeURIComponent(newStartIso)}&newEndDateTime=${encodeURIComponent(newEndIso)}`;
  const res = await fetch(url, { method: 'POST' });
  const txt = await res.text();
  try { console.log('Rescheduled:', JSON.parse(txt)); alert('Rescheduled'); }
  catch(e){ alert(txt); }
}

C. Doctor UI
1) Doctor Schedule page
- UI Elements:
  - <input type="number" id="doctorIdList">
  - <button id="loadDoctorAppts">Load My Appointments</button>
  - <div id="doctorApptList"></div>

JS:
async function loadDoctorAppointments(){
  const did = document.getElementById('doctorIdList').value;
  const res = await fetch(`${baseUrl}/doctor/appointments?doctorId=${did}`);
  const list = await res.json();
  const container = document.getElementById('doctorApptList');
  container.innerHTML = list.map(a => `#${a.scheduleId} | Patient: ${a.patientId} | ${a.startTime} - ${a.endTime} | ${a.status}`).join('<br>');
}

document.getElementById('loadDoctorAppts').addEventListener('click', loadDoctorAppointments);

2) Doctor Cancel / Reschedule
- Cancel:
async function cancelByDoctor(appointmentId, doctorId){
  const url = `${baseUrl}/cancel?appointmentId=${appointmentId}&doctorId=${doctorId}`;
  const res = await fetch(url, { method: 'POST' });
  alert(await res.text());
}

- Reschedule:
async function rescheduleByDoctor(appointmentId, doctorId, newStartIso, newEndIso){
  const url = `${baseUrl}/reschedule?appointmentId=${appointmentId}&requesterId=${doctorId}&requesterRole=DOCTOR&newStartDateTime=${encodeURIComponent(newStartIso)}&newEndDateTime=${encodeURIComponent(newEndIso)}`;
  const res = await fetch(url, { method: 'POST' });
  const txt = await res.text();
  try { console.log('Rescheduled:', JSON.parse(txt)); alert('Rescheduled'); }
  catch(e){ alert(txt); }
}

3) Doctor Notes
async function updateDoctorNotes(appointmentId, doctorId, notes){
  const url = `${baseUrl}/notes?appointmentId=${appointmentId}&doctorId=${doctorId}&notes=${encodeURIComponent(notes)}`;
  const res = await fetch(url, { method: 'POST' });
  alert(await res.text());
}

D. Minimal HTML Sketch (combine elements above)
<html>
  <head>
    <meta charset="utf-8" />
    <title>HealSync Appointments</title>
    <style>
      body { font-family: Arial, sans-serif; margin: 20px; }
      .card { border: 1px solid #ddd; padding: 16px; border-radius: 8px; margin-bottom: 16px; }
      button { background: #2b7cff; color: white; border: 0; padding: 8px 12px; border-radius: 4px; cursor: pointer; }
      button:hover { background: #1f5ec1; }
      input, select { padding: 6px; margin: 4px 0; }
      h2 { margin-top: 0; }
    </style>
  </head>
  <body>
    <div class="card">
      <h2>Book Appointment (Patient)</h2>
      <label>Specialty</label>
      <select id="specialty"><option>Cardiology</option><option>Neurology</option><option>General</option><option>Pediatric</option></select><br>
      <label>Start</label><input type="datetime-local" id="start" />
      <label>End</label><input type="datetime-local" id="end" /><br>
      <label>Patient ID</label><input type="number" id="patientId" />
      <button id="bookBtn">Book</button>
    </div>

    <div class="card">
      <h2>My Appointments (Patient)</h2>
      <label>Patient ID</label><input type="number" id="patientIdList" />
      <button id="loadPatientAppts">Load</button>
      <div id="patientApptList"></div>
    </div>

    <div class="card">
      <h2>Doctor Appointments</h2>
      <label>Doctor ID</label><input type="number" id="doctorIdList" />
      <button id="loadDoctorAppts">Load</button>
      <div id="doctorApptList"></div>
    </div>

    <script>
      const baseUrl = 'http://localhost:8080/v1/healsync/book';
      function toIso(id){ const v=document.getElementById(id).value; if(!v) return ''; const d=new Date(v); return d.toISOString().slice(0,19); }
      async function bookAppointment(){
        const specialty = document.getElementById('specialty').value;
        const patientId = document.getElementById('patientId').value;
        const startIso = toIso('start');
        const endIso = toIso('end');
        const url = `${baseUrl}/appointment?specialty=${encodeURIComponent(specialty)}&startDateTime=${encodeURIComponent(startIso)}&endDateTime=${encodeURIComponent(endIso)}&patientId=${encodeURIComponent(patientId)}`;
        const res = await fetch(url, { method: 'POST' });
        const txt = await res.text(); try { console.log(JSON.parse(txt)); alert('Booked'); } catch(e){ alert(txt); }
      }
      document.getElementById('bookBtn').addEventListener('click', bookAppointment);
      async function loadPatientAppointments(){
        const pid = document.getElementById('patientIdList').value;
        const res = await fetch(`${baseUrl}/patient/appointments?patientId=${pid}`);
        const list = await res.json();
        const c = document.getElementById('patientApptList');
        c.innerHTML = list.map(a=>`#${a.scheduleId} | Dr ${a.doctorId} | ${a.startTime} - ${a.endTime} | ${a.status}`).join('<br>');
      }
      document.getElementById('loadPatientAppts').addEventListener('click', loadPatientAppointments);
      async function loadDoctorAppointments(){
        const did = document.getElementById('doctorIdList').value;
        const res = await fetch(`${baseUrl}/doctor/appointments?doctorId=${did}`);
        const list = await res.json();
        const c = document.getElementById('doctorApptList');
        c.innerHTML = list.map(a=>`#${a.scheduleId} | Patient ${a.patientId} | ${a.startTime} - ${a.endTime} | ${a.status}`).join('<br>');
      }
      document.getElementById('loadDoctorAppts').addEventListener('click', loadDoctorAppointments);
    </script>
  </body>
</html>

5) WHAT PATIENT SEES / DOES
---------------------------
- Book Appointment:
  - Select specialty, choose start/end time, click Book
  - Receives confirmation (doctor auto-assigned if available)
- View My Appointments:
  - See list with times, status
  - Actions: reschedule (pick new time) or cancel
- Appointment Details:
  - See assigned doctor and times

6) WHAT DOCTOR SEES / DOES
--------------------------
- Doctor Dashboard (Appointments):
  - Sees upcoming appointments list with patient IDs and times
  - Can cancel an appointment if needed (e.g., emergency)
  - Can reschedule to a new time (system checks conflicts)
  - Can add/update notes on the appointment

7) TESTING WITH POSTMAN (QUICK)
-------------------------------
- Environment var: baseUrl = http://localhost:8080
- Book:
  POST {{baseUrl}}/v1/healsync/book/appointment?specialty=Cardiology&startDateTime=2025-08-10T14:00:00&endDateTime=2025-08-10T14:30:00&patientId=1
- Cancel (Doctor):
  POST {{baseUrl}}/v1/healsync/book/cancel?appointmentId=123&doctorId=10
- Cancel (Patient):
  POST {{baseUrl}}/v1/healsync/book/cancel/patient?appointmentId=123&patientId=1
- Reschedule:
  POST {{baseUrl}}/v1/healsync/book/reschedule?appointmentId=123&requesterId=10&requesterRole=DOCTOR&newStartDateTime=2025-08-10T15:00:00&newEndDateTime=2025-08-10T15:30:00
- Get single:
  GET {{baseUrl}}/v1/healsync/book/appointment?appointmentId=123
- List patient:
  GET {{baseUrl}}/v1/healsync/book/patient/appointments?patientId=1
- List doctor:
  GET {{baseUrl}}/v1/healsync/book/doctor/appointments?doctorId=10
- Notes:
  POST {{baseUrl}}/v1/healsync/book/notes?appointmentId=123&doctorId=10&notes=Follow-up%20in%202%20weeks

8) EDGE CASES & TIPS
--------------------
- If booking returns 404: no doctor for specialty/time; try a different time window
- Ensure endDateTime > startDateTime
- For reschedule, requesterRole must be DOCTOR or PATIENT and match the appointment
- Timezone: datetime-local returns local; convert to ISO without timezone suffix if needed (backend parses LocalDateTime)
- Add client-side validation to prevent empty fields

9) OPTIONAL NEXT STEPS
----------------------
- Add endpoint to mark appointments as completed/no-show
- Add availability search endpoint to show free slots before booking
- Add pagination for lists
- Add security/auth with JWT and role checks
- Add email/SMS notifications

END OF FILE
